name: CI

on:
  push:
    branches: [ "development", "staging", "production" ]
#  pull_request:
#    branches: [ "development", "staging", "production" ]
#    types:
#      - closed
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
      sha_short: ${{ steps.extract_sha.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch name
        shell: bash
        run: |
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
          echo "${GITHUB_REF#refs/heads/}"
        id: extract_branch
      - name: Extract short sha
        id: extract_sha
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      - name: Test with Maven
        run: mvn test
      - name: Build with Maven
        run: mvn clean -DskipTests package
      - name: Move artifact
        run: |
          mkdir -p target/artifact
          mv Dockerfile target/artifact
          mv target/*.jar target/artifact
      - uses: actions/upload-artifact@master
        with:
          name: output-artifact
          path: target/artifact

  docker-dev:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.branch == 'development' }}
    steps:
      - uses: actions/download-artifact@master
        with:
          name: output-artifact
          path: target/artifact
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: misoboy/demo
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: target/artifact
          file: ./target/artifact/Dockerfile
          platforms: linux/amd64
          push: true
          tags: misoboy/demo:1.0-${{ needs.build.outputs.sha_short }}
          #labels: ${{ steps.docker_meta.outputs.labels }}
          labels: |
            GIT_SHORT_SHA=${{ needs.build.outputs.sha_short }}

  docker-stage:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.branch == 'staging' }}
    steps:
      - uses: actions/download-artifact@master
        with:
          name: output-artifact
          path: target/artifact
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: misoboy/demo
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: target/artifact
          file: ./target/artifact/Dockerfile
          platforms: linux/amd64
          push: true
          tags: misoboy/demo:1.0-${{ needs.build.outputs.sha_short }}
          #labels: ${{ steps.docker_meta.outputs.labels }}
          labels: |
            GIT_SHORT_SHA=${{ needs.build.outputs.sha_short }}        

  docker-prd:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ needs.build.outputs.branch == 'production' }}
    environment: production
    steps:
      - uses: actions/download-artifact@master
        with:
          name: output-artifact
          path: target/artifact
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: misoboy/demo
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: target/artifact
          file: ./target/artifact/Dockerfile
          platforms: linux/amd64
          push: true
          tags: misoboy/demo:1.0-${{ needs.build.outputs.sha_short }}
          #labels: ${{ steps.docker_meta.outputs.labels }}
          labels: |
            GIT_SHORT_SHA=${{ needs.build.outputs.sha_short }}
#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - uses: benjlevesque/short-sha@v1.2
#        id: short-sha
#      - name: deploy to cluster
#        uses: kodermax/kubectl-aws-eks@master
#        env:
#          KUBECTL_VERSION: "v1.22.0"
#          IAM_VERSION: "0.5.6"
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#        with:
#          args: set image deployment demo demo=misoboy/demo:1.0-${{ steps.short-sha.outputs.sha }} -n default --record
#      - name: Verify Kubernetes deployment
#        uses: kodermax/kubectl-aws-eks@master
#        env:
#          KUBECTL_VERSION: "v1.22.0"
#          IAM_VERSION: "0.5.6"
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#        with:
#          args: rollout status deployment demo -n default
