# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "development", "staging", "production" ]
    types:
      - closed
jobs:
  app:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: dynamic echo environments
        run: echo ${{ secrets.ENV_SECRET }}
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
      - name: Test with Maven
        run: mvn test
      - name: Build with Maven
        run: mvn clean -DskipTests package
      - run: |
          mkdir -p target/artifact
          mv Dockerfile target/artifact
          mv target/*.jar target/artifact
      - uses: actions/upload-artifact@master
        with:
          name: output-artifact
          path: target/artifact
  docker:
    needs: app
    runs-on: ubuntu-latest
    steps:
      - name: dynamic echo environments
        run: echo ${{ secrets.ENV_SECRET }}
      - uses: benjlevesque/short-sha@v1.2
        id: short-sha
      - uses: actions/download-artifact@master
        with:
          name: output-artifact
          path: target/artifact
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: misoboy/demo
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: target/artifact
          file: ./target/artifact/Dockerfile
          platforms: linux/amd64
          push: true
          tags: misoboy/demo:1.0-${{ steps.short-sha.outputs.sha }}
          #labels: ${{ steps.docker_meta.outputs.labels }}
          labels: |
            GIT_SHORT_SHA=${{ steps.short-sha.outputs.sha }}

#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - uses: benjlevesque/short-sha@v1.2
#        id: short-sha
#      - name: deploy to cluster
#        uses: kodermax/kubectl-aws-eks@master
#        env:
#          KUBECTL_VERSION: "v1.22.0"
#          IAM_VERSION: "0.5.6"
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#        with:
#          args: set image deployment demo demo=misoboy/demo:1.0-${{ steps.short-sha.outputs.sha }} -n default --record
#      - name: Verify Kubernetes deployment
#        uses: kodermax/kubectl-aws-eks@master
#        env:
#          KUBECTL_VERSION: "v1.22.0"
#          IAM_VERSION: "0.5.6"
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#        with:
#          args: rollout status deployment demo -n default
